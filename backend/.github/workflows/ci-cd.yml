name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    PYTHON_VERSION: '3.12'
    POSTGRES_VERSION: '16'

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:${{ env.POSTGRES_VERSION }}
                env:
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: lms_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:7-alpine
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Cache pip dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest-cov

            - name: Set up environment variables
              run: |
                  echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/lms_test" >> $GITHUB_ENV
                  echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
                  echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
                  echo "S3_ENDPOINT=http://localhost:9000" >> $GITHUB_ENV
                  echo "S3_ACCESS_KEY=test" >> $GITHUB_ENV
                  echo "S3_SECRET_KEY=test" >> $GITHUB_ENV
                  echo "S3_BUCKET=test" >> $GITHUB_ENV
                  echo "CDN_URL=http://localhost:9000" >> $GITHUB_ENV
                  echo "DEBUG=true" >> $GITHUB_ENV

            - name: Run linting
              run: |
                  ruff check .
                  black --check .

            - name: Run type checking
              run: |
                  mypy app/ --ignore-missing-imports

            - name: Run tests
              run: |
                  pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    security:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install safety bandit

            - name: Run safety check
              run: |
                  safety check -r requirements.txt

            - name: Run bandit security check
              run: |
                  bandit -r app/ -f json -o bandit-report.json || true

            - name: Upload security report
              uses: actions/upload-artifact@v3
              with:
                  name: security-report
                  path: bandit-report.json

    build:
        needs: [test, security]
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile.prod
                  push: true
                  tags: |
                      ${{ secrets.DOCKER_USERNAME }}/lms-backend:latest
                      ${{ secrets.DOCKER_USERNAME }}/lms-backend:${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy:
        needs: build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v4

            - name: Deploy to production
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ secrets.PROD_HOST }}
                  username: ${{ secrets.PROD_USERNAME }}
                  key: ${{ secrets.PROD_SSH_KEY }}
                  script: |
                      cd /opt/lms-backend
                      docker-compose -f docker-compose.prod.yml pull
                      docker-compose -f docker-compose.prod.yml up -d
                      docker system prune -f

            - name: Run database migrations
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ secrets.PROD_HOST }}
                  username: ${{ secrets.PROD_USERNAME }}
                  key: ${{ secrets.PROD_SSH_KEY }}
                  script: |
                      cd /opt/lms-backend
                      docker-compose -f docker-compose.prod.yml exec -T api alembic upgrade head

            - name: Health check
              run: |
                  sleep 30
                  curl -f ${{ secrets.PROD_URL }}/health || exit 1
